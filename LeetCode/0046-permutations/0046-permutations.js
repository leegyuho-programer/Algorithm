/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permute = function(nums) {
    const permutations = [];
    
    const dfs = (picked, unpicked) => {
        if(unpicked.length === 0) return permutations.push(picked);

        unpicked.forEach((num, i) => {
            dfs(
                [...picked, num],
                [...unpicked.slice(0, i), ...unpicked.slice(i+1)]
            );
        })
    }

    dfs([], nums);

    return permutations;
};

/**
-----------------> 고른 수: [],        남은 수: [1, 2, 3]
    1 -----------> 고른 수: [1],       남은 수: [2, 3]
        2 -------> 고른 수: [1, 2],    남은 수: [3]
            3 ---> 고른 수: [1, 2, 3], 남은 수: [] 첫 번째 순열
        3 -------> 고른 수: [1, 3],    남은 수: [2]
            2 ---> 고른 수: [1, 3, 2], 남은 수: [] 두 번째 순열
    2 -----------> 고른 수: [2],       남은 수: [1, 3]
        1 -------> 고른 수: [2, 1],    남은 수: [3]
            3 ---> 고른 수: [2, 1, 3], 남은 수: [] 세 번째 순열
        3 -------> 고른 수: [2, 3],    남은 수: [1]
            1 ---> 고른 수: [2, 3, 1], 남은 수: [] 네 번째 순열
    3 -----------> 고른 수: [3],       남은 수: [1, 2]
        1 -------> 고른 수: [3, 1],    남은 수: [2]
            2 ---> 고른 수: [3, 1, 2], 남은 수: [] 다섯 번째 순열
        2 -------> 고른 수: [3, 2],    남은 수: [1]
            1 ---> 고른 수: [3, 2, 1], 남은 수: [] 여섯 번째 순열
 */